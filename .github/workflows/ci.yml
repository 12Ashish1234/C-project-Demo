name: CI_Pipeline

permissions:
  actions: read
  contents: read

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  Build_Scan:
    runs-on: ubuntu-22.04
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      #SonarCloud Scanner
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libgtest-dev
      - name: Build Google Test
        run: |
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt
          sudo make
          sudo cp lib/*.a /usr/lib

      #Running Build wrapper for C
      - name: Run build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} g++ -o test_graph ./src/graph.cpp -I/usr/include -L/usr/lib -lgtest -lgtest_main -pthread
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
  Tests:
    runs-on: ubuntu-22.04
    needs: [Build_Scan]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libgtest-dev
      - name: Build Google Test
        run: |
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt
          sudo make
          sudo cp lib/*.a /usr/lib
      - name: Compile the program
        run: |
          ls -la
          g++ -o test_graph ./src/graph.cpp -lgtest -lgtest_main -pthread
      - name: Run tests
        run: ./test_graph

  Build_Docker:
    runs-on: ubuntu-latest
    needs: [Tests]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Check for changes in the docker folder
        id: filter
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files: $CHANGED_FILES"
          # if echo "$CHANGED_FILES" | grep -qE '^src/'; then
          #   echo "RUN_DOCKER_BUILD=true" >> $GITHUB_ENV
          # else
          #   echo "RUN_DOCKER_BUILD=false" >> $GITHUB_ENV
          # fi

      # - name: Login to Docker Hub
      #   if: env.RUN_DOCKER_BUILD == 'true'
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Set up QEMU
      #   if: env.RUN_DOCKER_BUILD == 'true'
      #   uses: docker/setup-qemu-action@v3.4.0

      # - name: Set up Docker Buildx
      #   if: env.RUN_DOCKER_BUILD == 'true'
      #   uses: docker/setup-buildx-action@v3.9.0

      # - name: Build and push
      #   if: env.RUN_DOCKER_BUILD == 'true'
      #   uses: docker/build-push-action@v6.13.0
      #   with:
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/test-c-app:${{ github.run_number }}
